using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SharpLearning.Neural.Layers;
using MathNet.Numerics.LinearAlgebra;
using SharpLearning.Neural.Activations;
using System.Diagnostics;
using System.Linq;
using System.Collections.Generic;

namespace SharpLearning.Neural.Test.Layers
{
    [TestClass]
    public class ConvLayerTest
    {

        [TestMethod]
        public void ConvLayer_CopyLayerForPredictionModel()
        {
            var batchSize = 1;
            var random = new Random(232);

            var sut = new ConvLayer(2, 2, 2);
            sut.Initialize(3, 3, 1, batchSize, random);

            var layers = new List<ILayer>();
            sut.CopyLayerForPredictionModel(layers);

            var actual = (ConvLayer)layers.Single();

            Assert.AreEqual(sut.Width, actual.Width);
            Assert.AreEqual(sut.Height, actual.Height);
            Assert.AreEqual(sut.Depth, actual.Depth);

            Assert.AreEqual(sut.InputWidth, actual.InputWidth);
            Assert.AreEqual(sut.InputHeight, actual.InputHeight);
            Assert.AreEqual(sut.InputDepth, actual.InputDepth);

            MatrixAsserts.AreEqual(sut.Weights, actual.Weights);
            MatrixAsserts.AreEqual(sut.Bias, actual.Bias);

            Assert.AreEqual(sut.Im2Cols.RowCount, actual.Im2Cols.RowCount);
            Assert.AreEqual(sut.Im2Cols.ColumnCount, actual.Im2Cols.ColumnCount);

            Assert.AreEqual(sut.Conv.RowCount, actual.Conv.RowCount);
            Assert.AreEqual(sut.Conv.ColumnCount, actual.Conv.ColumnCount);

            Assert.AreEqual(sut.OutputActivations.RowCount, actual.OutputActivations.RowCount);
            Assert.AreEqual(sut.OutputActivations.ColumnCount, actual.OutputActivations.ColumnCount);
        }

        [TestMethod]
        public void ConvLayer_Initialize()
        {
            var batchSize = 1;
            var random = new Random(232);
                 
            var sut = new ConvLayer(2, 2, 2);
            sut.Initialize(3, 3, 1, batchSize, random);
        }

        [TestMethod]
        public void ConvLayer_Forward()
        {
            var fanIn = 3 * 3 * 3;
            var batchSize = 10;
            var random = new Random(232);

            var sut = new ConvLayer(2, 2, 20);
            sut.Initialize(3, 3, 3, batchSize, random);

            var input = Matrix<float>.Build.Random(batchSize, fanIn, random.Next());
            var actual = sut.Forward(input);

            Trace.WriteLine(string.Join(", ", actual.ToColumnWiseArray()));

            var expected = Matrix<float>.Build.Dense(batchSize, 80, new float[] { 0.1692574f, 0.1862763f, -0.07484812f, -0.09663562f, 0.2922946f, 0.1216508f, -1.041213f, 0.3892718f, -0.2990395f, -0.2807681f, -0.6677216f, -0.0708611f, 0.2884965f, -0.07486942f, 0.4912865f, -0.3679992f, -0.4568234f, 0.4737693f, -0.1994568f, -0.1435144f, 0.2783287f, -0.3774743f, 0.4232025f, -0.01378743f, 0.1086185f, -0.02988789f, -0.2070156f, -0.1445278f, 0.6860298f, 0.2713115f, 0.147534f, -0.5612464f, 0.63612f, 0.1565212f, -0.2011369f, -0.1360394f, -0.3405399f, -0.005352036f, 0.1317453f, -0.412113f, 0.4188632f, 0.004605197f, -0.2994843f, 0.1831019f, -0.1184248f, -0.2355856f, -0.3163511f, -0.4550005f, 0.2848783f, -0.3869459f, 0.1925414f, 0.07107702f, -0.1040277f, -0.00498069f, -0.10214f, -0.4271941f, -0.388871f, 0.2531772f, 0.2202048f, 0.4929874f, 0.1794753f, 0.4376808f, -0.4049298f, -0.01084837f, 0.2355733f, -0.028006f, -0.7818964f, 0.07152217f, -0.4733707f, 0.02208579f, -0.07711504f, -0.3834309f, -0.2722426f, -0.2900759f, 0.4256909f, 0.195015f, -0.2275436f, -0.07700579f, -0.4052135f, 0.8749893f, 0.420058f, -0.2185539f, -0.2701053f, 0.1109389f, 0.4767261f, -0.3548683f, 0.372154f, -0.4220298f, 0.5378444f, -0.6558636f, -0.1415022f, 0.4182646f, 0.01791152f, 0.1975475f, -0.1697308f, -0.07455085f, 0.2841614f, 0.06522789f, 0.4560542f, 0.641337f, -0.08086669f, -0.2960469f, 0.1527473f, 0.1790983f, 0.1614457f, -0.07664193f, -0.1753575f, -0.05600227f, -0.719094f, -0.3304579f, -0.1950525f, 0.3147618f, -0.3326662f, 0.4381625f, 0.09173544f, 0.03747956f, -0.05081383f, -0.2694714f, -0.482815f, 0.3788641f, -0.2416389f, -0.4342273f, 0.3805934f, 0.3433242f, -0.3040207f, -0.09558829f, -0.2160788f, -0.1249838f, 0.4784348f, 0.1085064f, 0.2442342f, -0.01476629f, 0.3576721f, 0.5592632f, 0.00071739f, -0.2800201f, -0.784189f, -0.3212646f, -0.01559471f, -0.5741932f, 0.3032698f, 0.3258049f, -0.3941248f, 0.2712379f, 0.4096691f, 0.2540648f, 0.3282371f, -0.007536334f, 0.3164673f, 0.1209614f, 0.252228f, -0.2652455f, -0.08099763f, 0.1764756f, 0.4827995f, -0.1014912f, -0.3536201f, -0.3171438f, -0.1655895f, 0.04199123f, -0.2854703f, -0.01327894f, 0.08627298f, 0.2694178f, 0.1649345f, 0.1602806f, -0.08130583f, 0.1819456f, 0.001642862f, -0.02910198f, 0.268615f, -0.1843549f, 0.02169791f, -0.1558104f, -0.02199734f, -0.05814308f, 0.2645384f, -0.3214191f, -8.453253E-05f, -0.6667452f, 0.2554561f, -0.006902948f, 0.3687063f, -0.2592913f, -0.1221327f, 0.3359181f, -0.4610034f, -0.06533562f, 0.4698878f, 0.1805186f, -0.1106178f, 0.04898075f, 0.24589f, 0.2770342f, -0.07287686f, -0.2697504f, -0.4871747f, 0.5228301f, -0.03654434f, -0.3453904f, -0.3636326f, -0.5330586f, 0.6152926f, 0.3682519f, -0.06997348f, -0.5646342f, -0.466511f, -0.1477329f, -0.5993619f, -0.4220925f, -0.1508453f, 0.07029515f, 0.05689471f, 0.5907256f, 0.1328211f, -0.3198101f, -0.2914091f, -0.1267295f, -0.3353272f, -0.2289248f, 0.1674966f, -0.2553641f, 0.1475557f, 0.1566242f, 0.3420489f, -0.04239336f, -0.02131692f, -0.3498928f, 0.3596937f, -0.26407f, 0.1286207f, -0.4048905f, 0.3593608f, 0.07229146f, 0.1372759f, -0.05223437f, -0.7898192f, -0.2831089f, -0.3254488f, 0.05715532f, 0.2096584f, 0.2407628f, -0.1369183f, 0.3527802f, 0.3534375f, 0.03495252f, 0.5261857f, -0.2511941f, 0.3786255f, -0.1841027f, 0.193885f, 0.3128588f, -0.3894247f, -0.2352287f, 0.2021289f, 0.0708009f, 0.3401162f, 0.06627185f, 0.2875545f, 0.2066583f, -0.2473254f, -0.1022539f, 0.01617597f, -0.01234058f, -0.1387691f, 0.1362604f, -0.5466633f, 0.1525471f, -0.3406489f, 0.05041549f, -0.3174466f, 0.2769839f, -0.1851732f, 0.2164392f, -0.08917449f, -0.01693859f, -0.08737597f, 0.1057934f, -0.1245834f, 0.04915713f, 0.4342565f, 0.4349686f, -0.3523516f, -0.3791845f, 0.148021f, 0.255162f, -0.2175574f, 0.1223797f, 0.1091303f, 0.06948613f, -0.625424f, -0.0606725f, 0.2998153f, -0.2366273f, 0.04528576f, 0.1665279f, -0.6121361f, 0.4171246f, -0.282858f, 0.1201248f, 0.1448443f, 0.5100836f, 0.05758191f, 0.646979f, 0.3010181f, -0.3456112f, 0.4446893f, -0.4781477f, 0.3121712f, 0.1478002f, 0.3087364f, -0.326483f, -0.3479131f, 0.09974021f, -0.03018482f, 0.07052269f, 0.09607379f, -0.3047539f, 0.5442565f, 0.01680572f, 0.3062713f, 0.06956738f, 0.008994015f, -0.3081787f, -0.2795559f, 0.3295105f, -0.1437781f, 0.08986975f, 0.1471307f, -0.01628676f, 0.1638699f, 0.2129019f, 0.2227532f, 0.138471f, -0.1074902f, 0.1058653f, 0.0278833f, -0.05965826f, 0.3984821f, 0.1294124f, 0.016785f, 0.1440305f, -0.06596336f, -0.588788f, -0.1439973f, 0.09560877f, -0.1703843f, 0.4360069f, -0.251874f, 0.179521f, 0.01645616f, -0.1218086f, 0.2402514f, -0.2374226f, -0.1267831f, 0.03524549f, 0.08368311f, -0.1095852f, -0.2411427f, 0.04421735f, -0.1975192f, -0.03653181f, 0.1139676f, -0.1982377f, 0.1226208f, 0.07646142f, 0.3186501f, 0.2289082f, -0.5042146f, -0.01578645f, -0.04631389f, -0.1115668f, 0.1464333f, -0.03412898f, -0.3367977f, 0.2952815f, 0.4766586f, -0.3717837f, -0.05283795f, -0.2907895f, 0.02527842f, 0.1386276f, 0.6509294f, -0.08565777f, -0.05243175f, -0.08082626f, 0.1851023f, -0.3375545f, 0.239222f, -0.1901625f, 0.1496887f, 0.30625f, 0.01404154f, 0.2229235f, -0.2329949f, -0.1504211f, -0.1680661f, 0.1466926f, 0.2231174f, -0.2329266f, 0.3627622f, 0.4152234f, -0.3747136f, -0.1939546f, -0.1814972f, 0.4300975f, 0.1739981f, -0.06327726f, 0.6456259f, 0.2822549f, -0.04317528f, -0.02286176f, 0.1395372f, -0.2857848f, -0.132897f, 0.3675869f, -0.4215499f, 0.1477453f, -0.1261028f, -0.1307156f, 0.1795864f, 0.7404325f, -0.33662f, 0.4017934f, 0.1328328f, -0.03126439f, 0.1533984f, -0.221258f, 0.1016159f, 0.3711282f, 0.01967584f, -0.353548f, -0.5368599f, -0.04386104f, 0.01951377f, 0.06850108f, 0.1019976f, 0.02954641f, 0.3168004f, 0.07520067f, -0.2237056f, -0.2420223f, -0.3713391f, -0.02200801f, 0.2701677f, -0.2851715f, 0.1866808f, 0.06843841f, -0.1954225f, -0.09555226f, -0.2339155f, -0.2936823f, -0.06673622f, -0.2453066f, 0.1145339f, 0.003255178f, 0.3896213f, 0.1139029f, -0.2635895f, 0.2333014f, -0.052846f, -0.9369454f, 0.1390152f, 0.3670638f, -0.06249629f, -0.06648884f, 0.4584589f, -0.382628f, -0.008639365f, 0.001924033f, -0.2587298f, 0.01939342f, -0.2859299f, -0.1306276f, -0.294398f, 0.04879014f, 0.5850257f, 0.5436986f, -0.02951019f, -0.1421142f, 0.6050261f, 0.7871512f, -0.7523935f, -0.5143024f, -0.02657516f, 0.8821711f, 0.2219232f, 0.1606005f, 1.199493f, 0.4590084f, -0.07440851f, 0.04648374f, 0.0693135f, -0.6801443f, -0.1764907f, 0.6704935f, 0.1444788f, 0.3216679f, 0.1285197f, -0.0554339f, 0.11141f, 0.449926f, -0.2896863f, -0.08346666f, -0.3706405f, 0.1126703f, -0.06782557f, 0.2480593f, -0.1156172f, 0.5403272f, -0.3245393f, -0.07086332f, -0.254383f, 0.1081749f, -0.3036953f, -9.810808E-05f, 0.4801897f, 0.3619258f, 0.3324108f, -0.3764057f, 0.05579969f, 0.2259609f, -0.01925011f, 0.2342257f, 0.2861802f, -0.04831076f, 0.3884206f, -0.08535928f, -0.05927531f, -0.1243224f, 0.04074381f, 0.2377273f, -0.4303079f, -0.1701606f, 0.05487723f, -0.04604896f, 0.4907781f, 0.06348027f, 0.2797591f, 0.11478f, -0.3034234f, -0.01089714f, 0.3448972f, -0.2722916f, -0.210154f, 0.04252157f, -0.674798f, 0.2393003f, -0.2451864f, -0.2104699f, -0.1455342f, 0.4711912f, 0.1903298f, 0.3696217f, -0.02543968f, -0.09615741f, -0.1702215f, -0.00385895f, 0.08553781f, -0.07118453f, 0.5544834f, 0.1799319f, 0.02338139f, -0.3681279f, -0.241059f, 0.1723197f, -0.4302899f, 0.1187246f, -0.1672298f, -0.1748101f, -0.3464785f, 0.4375872f, 0.2052351f, 0.3276058f, 0.1262152f, -0.2502162f, -0.3584991f, 0.3641848f, 0.5248222f, 0.4690104f, -0.1823575f, 0.196727f, 0.1474375f, -0.5714729f, 0.03993537f, -0.1360019f, -0.3098485f, 0.5625116f, -0.298993f, -0.005213898f, 0.3178065f, -0.181489f, 0.5422693f, -0.06508911f, 0.01221321f, 0.06319252f, 0.0746305f, -0.702193f, -0.00468027f, 0.1158736f, 0.2732602f, 0.1283354f, -0.2989256f, -0.05117267f, -0.01556952f, 0.3365753f, 1.111349f, -0.07110839f, 0.5564383f, 0.1609262f, 0.1418458f, 0.3353337f, 0.01825393f, -0.07523578f, 0.03835348f, 0.4594875f, 0.2244763f, -0.1381974f, 0.4316777f, 0.1464482f, -0.3556936f, -0.04240875f, -0.007516457f, 0.1537272f, -0.04426775f, 0.1295165f, 0.3963901f, 0.07461546f, -0.3889468f, 0.2934005f, -0.1163675f, 0.2253406f, -0.6287299f, 0.06653845f, -0.3109868f, 0.01756806f, 0.6510254f, 0.03787421f, 0.1213083f, -0.1388513f, -0.2166828f, 0.2392427f, 0.04223552f, 0.1287951f, 0.08960173f, 0.008013666f, -0.9792827f, 0.2168676f, -0.3183192f, 0.08037373f, -0.1832756f, -0.4354511f, -0.08511015f, -0.3150592f, 0.185976f, -0.3505786f, -0.3531446f, 0.273809f, -0.5315983f, -0.4491588f, 0.3818713f, 0.1879933f, 0.03485464f, 0.02705495f, -0.003386001f, 0.0002176362f, -0.4922176f, -0.171722f, 0.7339025f, 0.09891912f, 0.05684506f, -0.3737296f, 0.4802582f, 0.01285107f, 0.1689233f, -0.09934229f, -0.5602099f, 0.2709527f, 0.243844f, -0.1499614f, -0.2401989f, -0.2440095f, 0.2396158f, -0.1312166f, 0.1997024f, -0.2799544f, -1.013851f, 0.08616395f, -0.04903545f, 0.07323048f, -0.1742014f, -0.4569864f, 0.3445128f, 0.1593944f, -0.0808828f, -0.3678738f, -0.5876057f, 0.04045978f, -0.4594888f, -0.02519275f, 0.3949842f, 0.0412545f, -0.3638203f, 0.4025562f, 0.223042f, -0.2367565f, 0.62578f, -0.1605208f, 0.3127849f, -0.3299601f, 0.3195587f, 0.0863914f, 0.13259f, -0.006247275f, 0.503341f, 0.05782602f, -0.1476472f, -0.3407492f, -0.03656038f, 0.1955917f, 0.1539351f, 0.4333505f, 0.2859318f, 0.3712501f, 0.2364473f, 0.04204751f, -0.1298437f, -0.3149214f, -0.1745979f, -0.2557094f, 0.3191985f, 0.1522895f, -0.4184715f, -0.2901936f, 0.1425458f, 0.1376823f, 0.01366929f, 0.01909065f, -0.2254236f, 0.00416715f, 0.07081819f, 0.5827011f, -0.1408478f, 0.02672458f, -0.0263886f, -0.04674789f, -0.8655452f, -0.1801702f, 0.08092777f, 0.00976777f, -0.1797343f, -0.1631894f, -0.03196303f, -0.1475366f, 0.01172754f, 0.07194453f, -0.9468163f, 0.02126007f, -0.158352f, 0.3780484f, 0.06226199f, 0.3217729f, -0.09044219f, -0.06604958f, -0.508866f, -0.08903915f, 0.04240141f, -0.3605357f, 0.05802887f, 0.1560137f, 0.02766399f, 0.04523823f, -0.602717f, -0.2543876f, -0.3607137f, 0.4230922f, 0.2882175f, 0.3113905f, -0.4623075f, 0.09178203f, 0.006836304f, 0.5419749f, -0.4476973f, -0.1038544f, -0.2285561f, -0.1731725f, -0.6661875f, -0.04285451f, -0.2525814f, -0.1554537f, -0.411502f, -0.4048897f, 0.04331928f, -0.2661522f, 0.01158584f, 0.1918152f, -0.3310505f, 0.1707087f, 0.02430101f, 0.2290766f });
            MatrixAsserts.AreEqual(expected, actual);
        }

        [TestMethod]
        public void ConvLayer_Backward()
        {
            var fanIn = 3 * 3 * 3;
            var batchSize = 10;
            var random = new Random(232);

            var sut = new ConvLayer(2, 2, 2);
            sut.Initialize(3, 3, 3, batchSize, random);

            var input = Matrix<float>.Build.Random(batchSize, fanIn, random.Next());
            sut.Forward(input);

            var delta = Matrix<float>.Build.Random(batchSize, 8, random.Next());
            var actual = sut.Backward(delta);

            Trace.WriteLine(string.Join(", ", actual.ToColumnWiseArray()));

            var expected = Matrix<float>.Build.Dense(batchSize, 27, new float[] { -0.274967f, -0.3935469f, 0.2800484f, 1.097447f, -0.2711483f, -0.03879771f, 0.1882302f, 0.7293332f, -0.5473624f, 0.211504f, 0.7985414f, 0.4699093f, 0.643296f, 0.7175909f, 0.8139423f, 0.3498672f, -0.7942337f, -0.4888145f, -0.3363952f, -0.1225549f, 0.1386274f, 0.2027501f, 0.1648716f, 0.06844127f, 0.2827394f, 0.1492245f, -0.4100322f, -0.1585201f, -0.1320359f, 0.003921011f, -0.3287757f, -1.022171f, -0.1765904f, -0.198723f, 0.2465134f, 0.08154765f, 0.1662495f, 0.8062065f, -0.7754765f, -0.1135786f, -0.1861662f, -0.1598644f, -0.06371647f, -0.9855934f, -0.0358592f, 0.1994304f, 1.487299f, -0.4508847f, 0.2050106f, -0.6903741f, -0.7553955f, -0.4990724f, -0.3359569f, -0.1265749f, -0.9923664f, -0.2399444f, 1.663847f, 0.6406363f, 0.4042394f, -0.09500321f, -0.704028f, -0.2943208f, -0.01582509f, 0.7920798f, 0.2739504f, -0.3162334f, 0.3971447f, 0.1850695f, 0.1071172f, 0.1784138f, -0.5342004f, -0.05211198f, -0.3947542f, 0.1938816f, -0.002548911f, -0.8840727f, -0.6133484f, -0.7062879f, 0.03322095f, 0.5764043f, 0.821278f, -0.3085532f, -0.5347599f, -0.3210419f, 0.3096435f, -0.5930707f, -1.342164f, -0.3278917f, -0.004621468f, 0.3274634f, -0.2798087f, -0.2954118f, -0.3566556f, -0.08849356f, 0.00838411f, -0.2370251f, 0.3753419f, 0.5508364f, -0.1055786f, 0.1833034f, 0.5860072f, 0.08119005f, -0.5030053f, -0.9939473f, 0.1176518f, -0.2876323f, 0.7445447f, -0.6312771f, 0.8695272f, -0.3630674f, -0.7758824f, -0.5858397f, -0.5332345f, -0.3810032f, -0.964303f, -0.3747915f, 0.9643934f, 0.5900901f, 0.2837934f, 0.1088028f, -0.9959559f, -0.6165664f, -0.0894464f, 1.38921f, 0.04920219f, -0.5107774f, 0.7560333f, 0.9620839f, -0.23311f, 0.458284f, 0.4748974f, 0.1969905f, -0.4489872f, 0.1558334f, 0.3726765f, -0.9321294f, -0.4871783f, -0.8384704f, 0.2213702f, 0.4425906f, 1.065255f, -0.316883f, -0.6216162f, -0.08964062f, 0.1118596f, -0.6748203f, -0.4754122f, 0.01926102f, 0.4394254f, 0.2218516f, -0.3998976f, -0.5168949f, 0.08361631f, 0.3185667f, 0.308773f, 0.00287616f, 0.08438578f, 0.1597282f, -0.2501573f, -0.08231808f, -0.9105299f, -0.3098229f, 0.0645324f, 0.1585153f, 0.01108433f, -0.2147778f, 0.008558795f, -0.3833022f, -0.3670541f, 0.09164967f, 0.1019813f, -0.2487883f, -0.1804086f, -0.2480816f, 0.09933411f, -0.249201f, -0.6595219f, -0.330444f, -0.2229211f, 0.1138735f, 0.01842264f, 0.08872648f, -0.3995927f, -0.7888892f, 0.1869114f, -0.114649f, 0.09647785f, -0.1624304f, 0.3046054f, -0.03311901f, -0.7096997f, -0.96969f, -0.4682524f, 0.5047357f, -0.8713949f, -0.5620309f, 1.409136f, 1.256758f, -0.1071846f, 0.2546317f, 0.7833996f, 0.1496462f, 0.2248397f, 0.3830402f, 0.47605f, 0.007815802f, 0.09727777f, -0.3566286f, 0.07987431f, -0.2151046f, -0.5934178f, 0.110188f, -0.3750526f, 0.5936977f, -0.06024697f, -0.5948237f, 0.6809542f, 0.4222387f, 0.4078679f, 0.486451f, 0.1063227f, -1.410975f, -0.7082027f, 0.3700438f, 0.4306639f, -0.92893f, -0.08070379f, 0.5612865f, -0.3632894f, 0.2926016f, -0.05687451f, -0.44078f, 0.09391114f, -0.02486932f, -0.00750985f, -0.2028222f, 0.3819636f, -0.6170103f, -0.3093356f, -0.2632895f, -0.4416305f, -0.1405605f, -0.02159518f, 0.5134141f, 0.1525478f, -0.2213655f, 0.2669162f, 0.1092121f, 0.1063798f, 0.1350585f, -0.6374478f, -0.6620876f, -0.1584484f, 0.3515817f, 0.3659942f, -0.496719f, -0.4204473f, -0.2666532f, -0.3231707f, 0.2213767f, -0.2281003f, -0.4474669f, -0.1402704f, -0.4382798f, 0.06823012f, -0.2799953f, -0.8757226f, -0.6428597f, -0.561957f, 0.09450609f });
            MatrixAsserts.AreEqual(expected, actual);
        }

        [TestMethod]
        public void ConvLayer_MultipleForwardsPasses()
        {
            var fanIn = 3 * 3 * 3;
            var fanOut = 2 * 2 * 2;
            var batchSize = 10;
            var random = new Random(232);

            var sut = new ConvLayer(2, 2, 2);
            sut.Initialize(3, 3, 3, batchSize, random);

            var input = Matrix<float>.Build.Random(batchSize, fanIn, random.Next());

            var expected = Matrix<float>.Build.Dense(batchSize, fanOut);
            sut.Forward(input).CopyTo(expected);

            for (int i = 0; i < 20; i++)
            {
                var actual = sut.Forward(input);

                Assert.AreEqual(expected, actual);
            }
        }

        [TestMethod]
        public void ConvLayer_MultipleBackwardsPasses()
        {
            var fanIn = 3 * 3 * 3;
            var fanOut = 2 * 2 * 2;
            var batchSize = 10;
            var random = new Random(232);

            var sut = new ConvLayer(2, 2, 2);
            sut.Initialize(3, 3, 3, batchSize, random);

            var input = Matrix<float>.Build.Random(batchSize, fanIn, random.Next());
            sut.Forward(input);

            var delta = Matrix<float>.Build.Dense(batchSize, fanOut, 1.0f);
            var expected = Matrix<float>.Build.Dense(batchSize, fanIn);

            sut.Backward(delta).CopyTo(expected);

            for (int i = 0; i < 20; i++)
            {
                var actual = sut.Backward(delta);
                Assert.AreEqual(expected, actual);
            }
        }

        [TestMethod]
        public void ConvLayer_GradientCheck_BatchSize_1()
        {
            var inputWidth = 3;
            var inputHeight = 3;
            var inputDepth = 3;
            var batchSize = 1;

            var sut = new ConvLayer(2, 2, 2, 1, 0, Activation.Undefined);
            GradientCheckTools.CheckLayer(sut, inputWidth, inputHeight, inputDepth, batchSize, 1e-4f, new Random(21));
        }

        [TestMethod]
        public void ConvLayer_GradientCheck_BatchSize_11()
        {
            var inputWidth = 3;
            var inputHeight = 3;
            var inputDepth = 3;
            var batchSize = 11;

            var sut = new ConvLayer(2, 2, 2, 1, 0, Activation.Undefined);
            GradientCheckTools.CheckLayer(sut, inputWidth, inputHeight, inputDepth, batchSize, 1e-4f, new Random(21));
        }
    }
}
